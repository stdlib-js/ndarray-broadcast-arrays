{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar broadcastShapes = require( '@stdlib/ndarray-base-broadcast-shapes' );\nvar broadcastArray = require( '@stdlib/ndarray-broadcast-array' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Broadcasts ndarrays to a common shape.\n*\n* ## Notes\n*\n* -   The returned arrays are **read-only** views on their respective underlying data buffers. The views are typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to a view may affect multiple elements. If you need to write to one of the input arrays, copy the input array before broadcasting.\n*\n* @param {...ndarray} arrays - ndarray arguments\n* @throws {TypeError} first argument must be an ndarray or an array of ndarrays\n* @throws {TypeError} must provide valid ndarray arguments\n* @throws {Error} input arrays must be broadcast compatible\n* @returns {Array<ndarray>} broadcasted arrays\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var x1 = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x1.shape;\n* // returns [ 2, 2 ]\n*\n* var y1 = zeros( [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y1.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var out = broadcastArrays( [ x1, y1 ] );\n* // returns <ndarray>\n*\n* var x2 = out[ 0 ];\n* // returns <ndarray>\n*\n* var y2 = out[ 1 ];\n* // returns <ndarray>\n*\n* shx = x2.shape;\n* // returns [ 3, 2, 2 ]\n*\n* shy = y2.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = x2.get( 0, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 0, 0, 1 );\n* // returns 2\n*\n* v = x2.get( 1, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 1, 1, 0 );\n* // returns 3\n*\n* v = x2.get( 2, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zeros( [ 4, 2 ] );\n* // returns <ndarray>\n*\n* var out = broadcastArrays( [ x, y ] );\n* // throws <Error>\n*/\nfunction broadcastArrays( arrays ) {\n\tvar shapes;\n\tvar nargs;\n\tvar list;\n\tvar out;\n\tvar sh;\n\tvar N;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\tlist = [];\n\t} else if ( nargs > 1 ) {\n\t\tlist = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\tlist.push( arguments[ i ] );\n\t\t}\n\t} else if ( isndarrayLike( arrays ) ) {\n\t\tlist = [ arrays ];\n\t} else if ( isArrayLikeObject( arrays ) ) {\n\t\tlist = arrays;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an ndarray or an array of ndarrays. Value: `%s`.', arrays ) );\n\t}\n\tN = list.length;\n\n\t// Resolve the list of shapes...\n\tshapes = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\t// Delegate input argument validation to `getShape`...\n\t\ttry {\n\t\t\tshapes.push( getShape( list[ i ] ) );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\tthrow new TypeError( format( 'invalid argument. An ndarray argument must be an ndarray. Value: `%s`.', list[ i ] ) );\n\t\t}\n\t}\n\t// Broadcast the shapes to a common shape:\n\tsh = broadcastShapes( shapes );\n\tif ( sh === null ) {\n\t\tthrow new Error( 'invalid arguments. Input arrays must be broadcast compatible.' );\n\t}\n\t// Broadcast each array to the common shape...\n\tout = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tout.push( broadcastArray( list[ i ], sh ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = broadcastArrays;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Broadcast ndarrays to a common shape.\n*\n* @module @stdlib/ndarray-broadcast-arrays\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var broadcastArrays = require( '@stdlib/ndarray-broadcast-arrays' );\n*\n* var x1 = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x1.shape;\n* // returns [ 2, 2 ]\n*\n* var y1 = zeros( [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y1.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var out = broadcastArrays( [ x1, y1 ] );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* var x2 = out[ 0 ];\n* // returns <ndarray>\n*\n* var y2 = out[ 1 ];\n* // returns <ndarray>\n*\n* shx = x2.shape;\n* // returns [ 3, 2, 2 ]\n*\n* shy = y2.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = x2.get( 0, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 0, 0, 1 );\n* // returns 2\n*\n* v = x2.get( 1, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 1, 1, 0 );\n* // returns 3\n*\n* v = x2.get( 2, 0, 0 );\n* // returns 1\n*\n* v = x2.get( 2, 1, 1 );\n* // returns 4\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAoB,QAAS,qCAAsC,EACnEC,EAAkB,QAAS,uCAAwC,EACnEC,EAAiB,QAAS,iCAAkC,EAC5DC,EAAW,QAAS,uBAAwB,EAC5CC,EAAS,QAAS,uBAAwB,EA+E9C,SAASC,EAAiBC,EAAS,CAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAL,EAAQ,UAAU,OACbA,IAAU,EACdC,EAAO,CAAC,UACGD,EAAQ,EAEnB,IADAC,EAAO,CAAC,EACFI,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAClCJ,EAAK,KAAM,UAAWI,CAAE,CAAE,UAEhBd,EAAeO,CAAO,EACjCG,EAAO,CAAEH,CAAO,UACLN,EAAmBM,CAAO,EACrCG,EAAOH,MAEP,OAAM,IAAI,UAAWF,EAAQ,mGAAoGE,CAAO,CAAE,EAM3I,IAJAM,EAAIH,EAAK,OAGTF,EAAS,CAAC,EACJM,EAAI,EAAGA,EAAID,EAAGC,IAEnB,GAAI,CACHN,EAAO,KAAMJ,EAAUM,EAAMI,CAAE,CAAE,CAAE,CACpC,OAAUC,EAAM,CACf,MAAM,IAAI,UAAWV,EAAQ,yEAA0EK,EAAMI,CAAE,CAAE,CAAE,CACpH,CAID,GADAF,EAAKV,EAAiBM,CAAO,EACxBI,IAAO,KACX,MAAM,IAAI,MAAO,+DAAgE,EAIlF,IADAD,EAAM,CAAC,EACDG,EAAI,EAAGA,EAAID,EAAGC,IACnBH,EAAI,KAAMR,EAAgBO,EAAMI,CAAE,EAAGF,CAAG,CAAE,EAE3C,OAAOD,CACR,CAKAZ,EAAO,QAAUO,IChFjB,IAAIU,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isndarrayLike", "isArrayLikeObject", "broadcastShapes", "broadcastArray", "getShape", "format", "broadcastArrays", "arrays", "shapes", "nargs", "list", "out", "sh", "N", "i", "err", "main"]
}
